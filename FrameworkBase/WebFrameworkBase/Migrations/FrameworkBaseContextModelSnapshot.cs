// <auto-generated />
using System;
using FrameworkBaseRepo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebFrameworkBase.Migrations
{
    [DbContext(typeof(FrameworkBaseContext))]
    partial class FrameworkBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FrameworkBaseData.Models.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Code3")
                        .HasMaxLength(3);

                    b.Property<int?>("Currencyid");

                    b.Property<string>("Domain")
                        .HasMaxLength(10);

                    b.Property<string>("Extcode")
                        .HasMaxLength(2);

                    b.Property<int?>("Languageid");

                    b.Property<string>("Name");

                    b.Property<int>("Number")
                        .HasMaxLength(3);

                    b.HasKey("Id");

                    b.HasIndex("Currencyid");

                    b.HasIndex("Languageid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<int>("DecimalDigits")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("Rounding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("SymbolNative")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Localization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Languageid")
                        .HasMaxLength(10);

                    b.Property<string>("Localizationkey")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Localizationvalue");

                    b.HasKey("Id");

                    b.HasIndex("Languageid");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Borndate");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Languageid");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Middlename")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Languageid");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.PersonAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Addresstypeid");

                    b.Property<string>("Adressline1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Adressline2")
                        .HasMaxLength(50);

                    b.Property<string>("Adressline3")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(30);

                    b.Property<int>("Countryid");

                    b.Property<int>("Personid");

                    b.Property<string>("Postalcode")
                        .HasMaxLength(10);

                    b.Property<string>("Region")
                        .HasMaxLength(30);

                    b.Property<string>("State")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Addresstypeid");

                    b.HasIndex("Countryid");

                    b.HasIndex("Personid");

                    b.ToTable("PersonAddresses");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.PersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Contacttypeid");

                    b.Property<int>("Personid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Contacttypeid");

                    b.HasIndex("Personid");

                    b.ToTable("PersonContacts");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.PersonDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Documenttypeid");

                    b.Property<DateTime>("Expiredate");

                    b.Property<DateTime>("Issuedate");

                    b.Property<string>("Issuelocation");

                    b.Property<int>("Personid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Documenttypeid");

                    b.HasIndex("Personid");

                    b.ToTable("PersonDocuments");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Personid");

                    b.Property<int>("Roleid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Userpassword")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Userpasswordhash");

                    b.HasKey("Id");

                    b.HasIndex("Personid")
                        .IsUnique();

                    b.HasIndex("Roleid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClaimName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.UserProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("UserProviders");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Base_Addeddate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Base_Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Base_Ipaddress")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Base_Modifieddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Base_Username")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Userid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("Userid", "Key")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Country", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("Currencyid");

                    b.HasOne("FrameworkBaseData.Models.Language", "Language")
                        .WithMany("Countries")
                        .HasForeignKey("Languageid");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Localization", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("Languageid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FrameworkBaseData.Models.Person", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("Languageid");
                });

            modelBuilder.Entity("FrameworkBaseData.Models.PersonAddress", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.AddressType", "Addresstype")
                        .WithMany()
                        .HasForeignKey("Addresstypeid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FrameworkBaseData.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("Countryid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FrameworkBaseData.Models.Person", "Person")
                        .WithMany("Personaddresses")
                        .HasForeignKey("Personid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FrameworkBaseData.Models.PersonContact", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.ContactType", "Contacttype")
                        .WithMany()
                        .HasForeignKey("Contacttypeid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FrameworkBaseData.Models.Person", "Person")
                        .WithMany("Personcontacts")
                        .HasForeignKey("Personid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FrameworkBaseData.Models.PersonDocument", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.DocumentType", "Documenttype")
                        .WithMany()
                        .HasForeignKey("Documenttypeid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FrameworkBaseData.Models.Person", "Person")
                        .WithMany("Persondocuments")
                        .HasForeignKey("Personid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FrameworkBaseData.Models.User", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("FrameworkBaseData.Models.User", "Personid");

                    b.HasOne("FrameworkBaseData.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FrameworkBaseData.Models.UserClaim", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FrameworkBaseData.Models.UserProvider", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FrameworkBaseData.Models.UserSetting", b =>
                {
                    b.HasOne("FrameworkBaseData.Models.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
